services:
  # Base image containing dependencies.
  base:
    image: ghcr.io/bjoernellens1/ros_rmp/rmp:base
    build:
      context: .
      dockerfile: docker/Dockerfile
      tags:
        - ghcr.io/bjoernellens1/ros_rmp/rmp:base
      args:
        ROS_DISTRO: noetic
      target: base
      x-bake:
        platforms:
          - linux/amd64
    # Interactive shell
    stdin_open: true
    tty: true
    # Networking and IPC for ROS 2
    network_mode: host
    ipc: host
    # Needed to display graphical applications
    environment:
      # Allows graphical programs in the container.
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
      - ROS_HOSTNAME=192.168.11.233 #100.68.159.16 # must match the ip of the connecting network interface
      - ROS_IP=192.168.11.233 #100.68.159.16
      #- ROS_MASTER_URI="http://192.168.11.233:11311"
    volumes:
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
    restart: no
    ulimits:
      nofile:
        soft: "65536"
        hard: "65536"

    # lidar
  lidar:
    extends: base
    # depends_on_on:
    #   - lidar_filter
    command: >
      roslaunch rplidar_ros rplidar_a2m8.launch
    devices:
      - /dev/rplidar:/dev/ttyUSB0 #udevrules needed for this to work:
      # file /etc/udev/rules.d/98-rplidar.rules
#       SUBSYSTEM=="tty", ATTRS{serial}=="3453995662b3af4f81f4a69eba5f3f29", SYMLINK+="rplidar", MODE="0666"
    restart: unless-stopped

  master:
    extends: base
    command: >
      roscore

  segway:
    extends: base
    devices:
      - /dev/segway:/dev/ttyUSB0 #udevrules needed for this to work:
      # file /etc/udev/rules.d/99-segway.rules
#       SUBSYSTEM=="tty", ATTRS{idVendor}=="10c4", ATTRS{idProduct}=="ea60", ATTRS{serial}=="0001", SYMLINK+="segway", MODE="0666"
    command: |
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      rosrun segwayrmp SmartCar cmd_vel:=cmd_vel_out"
    restart: unless-stopped

  teleop: # remap cmd_vel to joy_vel for twist_mux
    extends: base
    devices:
      - /dev/input/js0:/dev/input/js0
    command: |
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      cd src/cps_rmp220_support &&
      git pull &&
      cd ../.. &&
      catkin_make -DCATKIN_WHITELIST_PACKAGES='cps_rmp220_support'
      roslaunch cps_rmp220_support teleop.launch"
    restart: unless-stopped

  gmapping:
    extends: base
    # depends_on:
    #   - segway
    #   - lidar
    command: |
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      rosrun gmapping slam_gmapping scan:=scan_filtered odom:=/robot_pose_ekf/odom_combined base_frame:=base_link odom_frame:=odom"

  # amcl:
  #   extends: base
  #   depends_on:
  #     - rsp
  #   command: |
  #     bash -c "
  #     source /rmp_ws/devel/setup.bash &&
  #     roslaunch cps_rmp220_support move_base.launch"

  move_base:
    extends: base
    # depends_on:
    #   - rsp
    command: |
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      cd src/cps_rmp220_support &&
      git pull &&
      cd ../.. &&
      catkin_make -DCATKIN_WHITELIST_PACKAGES='cps_rmp220_support'
      roslaunch cps_rmp220_support move_base_core.launch"

  amcl: # does not work currently?
    extends: base
    # depends_on:
    #   - segway
    command: |
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      roslaunch cps_rmp220_support linus_amcl.launch"
    restart: unless-stopped

  debug:
    extends: base
    volumes:
      - ./src:/debug_ws/src
    command: >
      /bin/bash

  tf_tree:
    extends: base
    volumes:
      - ./src:/debug_ws/src
    command: |
      /bin/bash -c "
      cd /debug_ws/src/ &&
      rosrun tf2_tools view_frames.py"

  rviz:
    extends: base
    devices:
      - /dev/dri:/dev/dri
    command: |
      /bin/bash -c "
      cd src/cps_rmp220_support &&
      git pull &&
      cd ../.. &&
      catkin_make -DCATKIN_WHITELIST_PACKAGES='cps_rmp220_support' &&
      source devel/setup.bash &&
      roslaunch cps_rmp220_support nav_rviz_view.launch"

  rsp:
    extends: base
    command: |
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      roslaunch cps_rmp220_support rsp.launch"
    restart: unless-stopped
  
  pose_ekf: # does not work currently?
    extends: base
    # depends_on:
    #   - segway
    command: |
      bash -c "
      apt install ros-noetic-robot-pose-ekf -y &&
      source /rmp_ws/devel/setup.bash &&
      roslaunch cps_rmp220_support robot_pose_ekf.launch"
    restart: unless-stopped

  lidar_filter: # must be adapted
    extends: base
    command: |
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      roslaunch cps_rmp220_support robot_scan_filter.launch"
    restart: unless-stopped

  twist_mux:
    extends: base
    command: |
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      cd src/cps_rmp220_support &&
      git pull &&
      cd ../.. &&
      catkin_make -DCATKIN_WHITELIST_PACKAGES='cps_rmp220_support'
      roslaunch cps_rmp220_support twist_mux.launch"
    restart: unless-stopped

  middleware:
    extends: base
    command: |
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      rosrun rmp220_middleware rmp220_middleware_extended.py cmd_vel_mux:=/twist_mux/cmd_vel"
    restart: unless-stopped

  odom_publisher:
    extends: base
    command:
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      rosrun cps_rmp220_support encoder_odom_publisher.py"
    restart: unless-stopped

  save_map:
    extends: debug
    command:
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      rosrun map_server map_saver -f /debug_ws/src/maps/newmap"
    restart: unless-stopped

  serve_map:
    extends: debug
    command:
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      rosrun map_server map_server /debug_ws/src/maps/map_basement_new.yaml"
    restart: unless-stopped
  
  
  realsense:
    extends: base
    volumes:
      - /dev:/dev
    device_cgroup_rules:
      - 'c 81:* rmw'
      - 'c 189:* rmw'
    privileged: true
    command:
      bash -c "
      source /rmp_ws/devel/setup.bash &&
      roslaunch realsense2_camera rs_camera.launch"
    restart: unless-stopped
